version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:16-alpine
    container_name: social-comm-postgres-prod
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password must be set}
      POSTGRES_DB: ${DB_NAME:-social_communication}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups  # For database backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - social-comm-network
    restart: always
    # Security: Run as non-root user
    user: postgres
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: social-comm-redis-prod
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Redis password must be set}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - social-comm-network
    restart: always
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Application - Production
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: social-comm-app:latest
    container_name: social-comm-app-prod
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-social_communication}?schema=public&connection_limit=10&pool_timeout=20
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:?JWT access secret must be set}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:?JWT refresh secret must be set}
      CORS_ORIGINS: ${CORS_ORIGINS:-https://yourdomain.com}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SENTRY_DSN: ${SENTRY_DSN:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - social-comm-network
    restart: always
    # Security
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional but recommended)
  # nginx:
  #   image: nginx:alpine
  #   container_name: social-comm-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #     - ./nginx/logs:/var/log/nginx
  #   depends_on:
  #     - app
  #   networks:
  #     - social-comm-network
  #   restart: always

volumes:
  postgres_data_prod:
    name: social-comm-postgres-prod
  redis_data_prod:
    name: social-comm-redis-prod

networks:
  social-comm-network:
    name: social-comm-network-prod
    driver: bridge
